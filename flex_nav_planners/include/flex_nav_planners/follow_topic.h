/*******************************************************************************
 *  Copyright (c) 2016-2023
 *  Capable Humanitarian Robotics and Intelligent Systems Lab (CHRISLab)
 *  Christopher Newport University
 *
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 *       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *       FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *       COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *       INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *       BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *       LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *       CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *       LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 *       WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *       POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

/**
 * @class FollowTopic
 * @brief A hybrid of base_local_planner and base_global_planner to make Paths
 *
 *   FollowTopic accepts Paths generated by a Flex Planner that were
 *   published on a topic. FollowTopic also has the ability to clear the
 *   local cost map by sending a ClearCostmapAction. The published Paths are
 *   accepted by way of a FollowTopicAction that instructs the node to
 *   subscribe to a planner's Path topic. The ability to clear the local cost
 *   map is accessible through the `clear_costmap` topic.
 */

#ifndef FLEX_PLANNER_FOLLOW_TOPIC_H
#define FLEX_PLANNER_FOLLOW_TOPIC_H

#include <ros/ros.h>
#include <tf2_ros/buffer.h>

#include <actionlib/server/simple_action_server.h>
#include <flex_nav_common/ClearCostmapAction.h>
#include <flex_nav_common/FollowTopicAction.h>
#include <nav_msgs/Path.h>

#include <costmap_2d/costmap_2d.h>
#include <costmap_2d/costmap_2d_ros.h>
#include <nav_core/base_global_planner.h>
#include <nav_core/base_local_planner.h>

#include <pluginlib/class_loader.hpp>

namespace flex_nav {
typedef actionlib::SimpleActionServer<flex_nav_common::ClearCostmapAction>
    ClearCostmapActionServer;
typedef actionlib::SimpleActionServer<flex_nav_common::FollowTopicAction>
    FollowTopicActionServer;

class FollowTopic {
public:
  /**
   * @brief The constructor to instantiate a node
   * @param tf A reference to a TransformListener
   */
  FollowTopic(tf2_ros::Buffer &tf);

  /**
   * @brief The destructor to tear down a node
   */
  ~FollowTopic();

private:
  /**
   * @brief The call back for the FollowTopicActionServer
   * @param goal A reference to the published goal
   */
  void execute(const flex_nav_common::FollowTopicGoalConstPtr &goal);

  /**
   * @brief The call back for the Path Subscriber
   * @param goal A reference to the published goal
   */
  void topic_cb(const nav_msgs::PathConstPtr &data);

  /**
   * @brief The call back for the ClearCostmapActionServer
   * @param goal A reference to the published goal
   */
  void clear_costmap(const flex_nav_common::ClearCostmapGoalConstPtr &goal);

  // tf::TransformListener &tf_;
  tf2_ros::Buffer& tf_;
  ros::Subscriber sub_;
  FollowTopicActionServer *ft_server_;
  ClearCostmapActionServer *cc_server_;
  costmap_2d::Costmap2DROS *costmap_;
  pluginlib::ClassLoader<nav_core::BaseGlobalPlanner> loader_;
  boost::shared_ptr<nav_core::BaseGlobalPlanner> planner_;
  bool running_;

  std::string robot_base_frame_, global_frame_, costmap_name_, name_;
  double planner_frequency_, controller_frequency_, inscribed_radius_,
      circumscribed_radius_;
  double planner_patience_, controller_patience_, oscillation_timeout_,
      oscillation_distance_;
  double distance_threshold_;

  nav_msgs::PathConstPtr current_path_;
  nav_msgs::PathConstPtr latest_path_;
};
};

#endif
